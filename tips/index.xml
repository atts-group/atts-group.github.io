<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on ATTS</title>
    <link>https://codenow.me/tips/</link>
    <description>Recent content in Tips on ATTS</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 15 Mar 2019 07:28:29 +0000</lastBuildDate>
    
	<atom:link href="https://codenow.me/tips/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python_grave_accent</title>
      <link>https://codenow.me/tips/python_grave_accent/</link>
      <pubDate>Sun, 28 Apr 2019 23:51:54 +0800</pubDate>
      
      <guid>https://codenow.me/tips/python_grave_accent/</guid>
      <description>python 里的 `a` 等价于 repr(a)</description>
    </item>
    
    <item>
      <title>让 eslint 运行本地规则</title>
      <link>https://codenow.me/tips/test-local-rule-eslint/</link>
      <pubDate>Sun, 28 Apr 2019 22:22:45 +0800</pubDate>
      
      <guid>https://codenow.me/tips/test-local-rule-eslint/</guid>
      <description>运行本地规则，需要使用 --rulesdir 参数：
eslint --rulesdir rules/ test.js 通过上面这个命令，eslint 扫描 test.js 的时候，会加载 rules 文件夹下面的规则。
不过，还需要注意一点，需要在 eslint 配置文件中配置要使用的本地规则名称，本地规则才能工作：
module.exports = { &amp;#34;env&amp;#34;: { &amp;#34;browser&amp;#34;: true, &amp;#34;commonjs&amp;#34;: true, &amp;#34;es6&amp;#34;: true }, &amp;#34;extends&amp;#34;: &amp;#34;eslint:recommended&amp;#34;, &amp;#34;globals&amp;#34;: { &amp;#34;Atomics&amp;#34;: &amp;#34;readonly&amp;#34;, &amp;#34;SharedArrayBuffer&amp;#34;: &amp;#34;readonly&amp;#34; }, &amp;#34;parserOptions&amp;#34;: { &amp;#34;ecmaVersion&amp;#34;: 2018 }, &amp;#34;rules&amp;#34;: { &amp;#34;too_long_access_path&amp;#34;: &amp;#34;error&amp;#34; // 需要在 rules 中配置要使用的本地规则  } }; </description>
    </item>
    
    <item>
      <title>Mysql 里的 DATE 函数</title>
      <link>https://codenow.me/tips/mysql_date/</link>
      <pubDate>Sun, 28 Apr 2019 10:55:12 +0900</pubDate>
      
      <guid>https://codenow.me/tips/mysql_date/</guid>
      <description>这周发现目前在做的项目的一个地方，就是要读取特定时间的订单数据，发现这个数据并不准确。 后来找到原因是因为前端传过来的数据是“YYYY-MM-DD”模式， 但是数据库保存的数据是“YYYY-MM-DD HH:MM:SS”格式。
所以查询语句从
SELECT * FROM XX WHERE ORDER_DATE BETWEEN ORDER_START_TIME AND ORDER_END_TIME；  变成
SELECT * FROM XX WHERE ORDER_DATE BETWEEN DATE(ORDER_START_TIME) AND DATE(ORDER_END_TIME)；  不过，这样的话如果读取数据量大，会影响性能。假期后我应该会把数据在前端处理一下，而不是在数据库层面操作。</description>
    </item>
    
    <item>
      <title>Django中使用MySQL数据库</title>
      <link>https://codenow.me/tips/use_mysql_in_django/</link>
      <pubDate>Sat, 27 Apr 2019 09:06:05 +0800</pubDate>
      
      <guid>https://codenow.me/tips/use_mysql_in_django/</guid>
      <description>在项目settings.py中修改如下内容
DATABASES={ &#39;default&#39;: { &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;, # 数据库连接引擎 &#39;NAME&#39;: &#39;&#39;, # 数据库名 &#39;USER&#39;: &#39;&#39;, # 用户账号 &#39;PASSWORD&#39;: &#39;&#39;, # 用户密码 &#39;HOST&#39;: &#39;localhost&#39;, &#39;PORT&#39;: 3306 # 连接端口 } }  </description>
    </item>
    
    <item>
      <title>STFW</title>
      <link>https://codenow.me/tips/stfw/</link>
      <pubDate>Sun, 21 Apr 2019 22:58:19 +0800</pubDate>
      
      <guid>https://codenow.me/tips/stfw/</guid>
      <description>当有人提了一个可以 STFW 解决的问题时，可以在给出关键词的同时，甩一个这样的链接：
http://lmgtfy.com/?q=如何安装python</description>
    </item>
    
    <item>
      <title>Command Line in Goland</title>
      <link>https://codenow.me/tips/command-line-in-goland/</link>
      <pubDate>Sun, 21 Apr 2019 21:54:00 +0800</pubDate>
      
      <guid>https://codenow.me/tips/command-line-in-goland/</guid>
      <description>在 Goland 的 tools 下可以创建命令行工具，可以直接在终端通过 goland . 启动 Goland 并且创建项目。</description>
    </item>
    
    <item>
      <title>Perf Cache Miss</title>
      <link>https://codenow.me/tips/perf-cache-miss/</link>
      <pubDate>Sun, 21 Apr 2019 21:16:02 +0800</pubDate>
      
      <guid>https://codenow.me/tips/perf-cache-miss/</guid>
      <description>perf stat -e L1-dcache-load-misses PROGRAM</description>
    </item>
    
    <item>
      <title>Docker容器退出时，自动删除容器</title>
      <link>https://codenow.me/tips/docker_remove/</link>
      <pubDate>Sun, 21 Apr 2019 21:04:57 +0800</pubDate>
      
      <guid>https://codenow.me/tips/docker_remove/</guid>
      <description> 1. docker run &amp;ndash;rm -v 在Docker容器退出时，默认容器内部的文件系统仍然被保留，以方便调试并保留用户数据。 但是，对于foreground容器，由于其只是在开发调试过程中短期运行，其用户数据并无保留的必要，因而可以在容器启动时设置&amp;ndash;rm选项，这样在容器退出时就能够自动清理容器内部的文件系统。示例如下：
docker run --rm centos4 # 等价于 docker run --rm=true centos4 显然，&amp;ndash;rm选项不能与-d同时使用，即只能自动清理foreground容器，不能自动清理detached容器 注意，&amp;ndash;rm选项也会清理容器的匿名data volumes。 所以，执行docker run命令带&amp;ndash;rm命令选项，等价于在容器退出后，执行docker rm -v。
rm只是删除容器，rm -v 不仅删除容器（如果容器有使用卷，卷也会进行相应的删除）。
2. 范例 [root@lvs-webserver2 run]# docker run --rm=true --name=centos4 -it centos [root@2c1d3bebde29 /]# [root@lvs-webserver2 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 2c1d3bebde29 centos &amp;#34;/bin/bash&amp;#34; 23 seconds ago Up 21 seconds centos4 [root@2c1d3bebde29 /]# exit exit [root@lvs-webserver2 run]# [root@lvs-webserver2 ~]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</description>
    </item>
    
    <item>
      <title>用 tail 实时查看日志</title>
      <link>https://codenow.me/tips/linux_tail/</link>
      <pubDate>Sun, 21 Apr 2019 18:17:44 +0900</pubDate>
      
      <guid>https://codenow.me/tips/linux_tail/</guid>
      <description>用 tail 命令看实时的日志文件
tail -f log_path  </description>
    </item>
    
    <item>
      <title>Windows安装Go开发环境</title>
      <link>https://codenow.me/tips/build_go_on_windows/</link>
      <pubDate>Sat, 20 Apr 2019 10:55:05 +0800</pubDate>
      
      <guid>https://codenow.me/tips/build_go_on_windows/</guid>
      <description>Windows版Go安装 下载Msi版进行安装。 下载地址
选择Microsoft Windows版下载。
安装步骤直接根据步骤提示进行。
安装文件目录说明： |目录名|备注| |-|-| |api|每个版本的api变更差异| |bin|go源码包编译出的编译器(go)，文档工具(godoc)，格式化工具(gofmt)| |blog|Go博客模板，使用Go的网页模板| |doc|英文版的Go文档| |lib|引用的一些库文件| |misc|杂项用途的文件，例如Android平台的编译、git的提交钩子等| |pkg|Windows平台编译好的中间文件| |src|标准库的源码| |test|测试用例|
开发环境安装 GoLand下载地址
具体安装步骤参考： CSDN文章</description>
    </item>
    
    <item>
      <title>Exmail Smtp TLS</title>
      <link>https://codenow.me/tips/exmail-smtp-tls/</link>
      <pubDate>Mon, 15 Apr 2019 00:06:16 +0800</pubDate>
      
      <guid>https://codenow.me/tips/exmail-smtp-tls/</guid>
      <description>配置腾讯企业邮箱 exmail 时，虽然官方文档上的 SMTP 端口是 465，但那是支持 SSL 校验验证的，如果客户端只支持 TLS 的话，需要把 SMTP 端口配置成 587，才能配置成功</description>
    </item>
    
    <item>
      <title>golang 中输出表格到 console</title>
      <link>https://codenow.me/tips/golang-output-table-in-console/</link>
      <pubDate>Sun, 14 Apr 2019 22:08:32 +0800</pubDate>
      
      <guid>https://codenow.me/tips/golang-output-table-in-console/</guid>
      <description>使用 tablewriter 即可。</description>
    </item>
    
    <item>
      <title>Goland Refactor</title>
      <link>https://codenow.me/tips/goland-refactor/</link>
      <pubDate>Sun, 14 Apr 2019 21:54:59 +0800</pubDate>
      
      <guid>https://codenow.me/tips/goland-refactor/</guid>
      <description>Goland 的 Refactor 功能，在修改、移动等操作时候可以对整个文件或者工程生效。</description>
    </item>
    
    <item>
      <title>更改Nginx默认用户与组</title>
      <link>https://codenow.me/tips/change_nginx_group_user/</link>
      <pubDate>Sun, 14 Apr 2019 17:42:53 +0800</pubDate>
      
      <guid>https://codenow.me/tips/change_nginx_group_user/</guid>
      <description> 1. Nginx默认用户  为了让Web服务更安全没需要尽可能地改掉软件默认的所有配置，包括端口、用户等。
首先查看Nginx服务的默认用户，一般情况下，Nginx服务启动的用户是Nobody,查看默认的配置文件，代码如下：
[root@localhost conf]# grep &amp;#39;#user&amp;#39; /etc/nginx/nginx.conf.default #user bobody;  为了防止黑客猜到这个Web服务的用户，我们需要将其更改成特殊的用户名；下面以nginx用户为例进行说明。
 2. 为nginx服务建立新用户 [root@localhost conf]# useradd nginx -s /sbin/nologin -M #&amp;lt;== 不需要有系统登录权限，应当禁止其登录能力，相当于Apache里的用户 [root@localhost conf]# id nginx #&amp;lt;==检查用户  3. 修改Nginx默认用户的两种方法  3.1 在编译Nginx软件时直接指定编译的用户和组，命令如下
[root@lnmp nginx-1.14.0]# ./configure --user=nginx --group=nginx ...  3.2 配置Nginx 服务，让其使用刚建立的Nginx用户
[root@lnmp nginx-1.14.0]# egrep &amp;#34;user&amp;#34; /etc/nginx/conf/nginx.conf user nginx; [root@lnmp nginx-1.14.0]# ps -ef|grep nginx|grep -v grep nginx 56998 56721 0 21:18 ? 00:00:00 nginx: worker process  </description>
    </item>
    
    <item>
      <title>在 Mysql 里使用 where1=1 的作用</title>
      <link>https://codenow.me/tips/mysql_where11/</link>
      <pubDate>Sun, 14 Apr 2019 16:38:31 +0900</pubDate>
      
      <guid>https://codenow.me/tips/mysql_where11/</guid>
      <description>这周工作时看了同事的代码，发现他写的很多 sql 语句都在后面加上了 where1=1，研究了一下，才发现了他的作用和好处。
例子：
string MySqlStr=”select * from table where”； if(Age.Text.Lenght&amp;gt;0) { MySqlStr=MySqlStr+“Age=“+“&amp;#39;Age.Text&amp;#39;“； } if(Address.Text.Lenght&amp;gt;0) { MySqlStr=MySqlStr+“and Address=“+“&amp;#39;Address.Text&amp;#39;“； } 如果两个条件都符合，即 sql 语句 &amp;ldquo;select * from table where Age=x and Address=xx&amp;rdquo; 成立。 但是如果两个条件都不符合，则语句变成了 &amp;ldquo;select * from table where&amp;rdquo;，这个时候就会报错。 使用 where 1=1 可以避免上面发生的问题。
参考链接： mysql中使用 where 1=1和 0=1 的作用及好处</description>
    </item>
    
    <item>
      <title>Windows下定时执行Py文件</title>
      <link>https://codenow.me/tips/run-scheduled-py-on-windows/</link>
      <pubDate>Sat, 13 Apr 2019 18:07:19 +0800</pubDate>
      
      <guid>https://codenow.me/tips/run-scheduled-py-on-windows/</guid>
      <description>Windows下定时执行任务，本质即在任务计划程序中添加自定义的Py文件执行任务。
操作方法：
 在计算机管理中打开任务计划程序。  点击创建基本任务，开始创建任务程序  设置启动py文件任务   最后点击完成，即可在活动任务中找到添加的任务。</description>
    </item>
    
    <item>
      <title>Awk De Duplication</title>
      <link>https://codenow.me/tips/awk-de-duplication/</link>
      <pubDate>Sun, 07 Apr 2019 23:59:32 +0800</pubDate>
      
      <guid>https://codenow.me/tips/awk-de-duplication/</guid>
      <description>使用 AWK 对数据进行去重：awk &#39;!a[$0]++{print}&#39;</description>
    </item>
    
    <item>
      <title>如何在Ubuntu18中设置静态IP</title>
      <link>https://codenow.me/tips/how_to_set_ip_address_in_ubuntu18/</link>
      <pubDate>Sun, 07 Apr 2019 22:24:28 +0800</pubDate>
      
      <guid>https://codenow.me/tips/how_to_set_ip_address_in_ubuntu18/</guid>
      <description>修改yaml文件
Ubuntu 18.04使用netplan配置网络，其配置文件是yaml格式的。
安装好Ubuntu 18.04之后，在/etc/netplan/目录下默认的配置文件名是50-cloud-init.yaml或者是01-network-manager-all.yaml
我们通过VIM修改它
sudo vim /etc/netplan/50-cloud-init.yaml #Let NetworkManager manage all devices on this system network: #version: 2 #renderer: NetworkManager ethernets: ens33: addresses: [172.20.12.74/24] gateway4: 172.20.12.254 dhcp4: no nameservers: addresses: [103.16.125.251, 103.16.125.252]  重启网络服务使配置生效:
 sudo netplan apply
 注意事项
1） 无论是ifupdown还是netplan，配置的思路都是一致的，在配置文件里面按照规则填入IP、掩码、网关、DNS等信息。
注意yaml是层次结构，需要缩进，冒号(:)表示字典，连字符(-)表示列表。
比如：
network: ethernets: ens160: addresses: - 210.72.92.28/24 # IP及掩码 gateway4: 210.72.92.254 # 网关 nameservers: addresses: - 8.8.8.8 # DNS version：2  2）只是针对ubuntu18.04 Server版，对于18.04 desktop它缺省是使用NetworkManger来进行管理，可使用图形界面进行配置，其网络配置文件是保存在：/etc/NetworkManager/system-connections目录下的，跟Server版区别还是比较大的。
3) 同时，在 Ubuntu 18.</description>
    </item>
    
    <item>
      <title>万物皆可 RSS</title>
      <link>https://codenow.me/tips/rsshub/</link>
      <pubDate>Sun, 07 Apr 2019 20:23:19 +0800</pubDate>
      
      <guid>https://codenow.me/tips/rsshub/</guid>
      <description>Rsshub 是一个轻量、易于扩展的 RSS 生成器, 可以给任何奇奇怪怪的内容生成 RSS 订阅源</description>
    </item>
    
    <item>
      <title>golang 类型检测</title>
      <link>https://codenow.me/tips/golang-type-detecting/</link>
      <pubDate>Sun, 07 Apr 2019 16:01:27 +0800</pubDate>
      
      <guid>https://codenow.me/tips/golang-type-detecting/</guid>
      <description>类型直接转换：
v := value.(*TypeA) 类型检测+转换：
v, isTypeB := value.(*TypeB) 类型检测 + switch:
switch v.(*Type) { case TypeA: //...  case TypeB: //... 	default: //... }</description>
    </item>
    
    <item>
      <title>vi cheet sheet: pbcopy</title>
      <link>https://codenow.me/tips/pbcopy/</link>
      <pubDate>Sun, 07 Apr 2019 14:17:25 +0900</pubDate>
      
      <guid>https://codenow.me/tips/pbcopy/</guid>
      <description> 用 vi 在 terminal 中复制信息 pbcopy &amp;lt; filename.extension # eg. pbcopy &amp;lt; a.txt  </description>
    </item>
    
    <item>
      <title>GitHub 绑定自己的域名</title>
      <link>https://codenow.me/tips/github_binds_dominname/</link>
      <pubDate>Tue, 02 Apr 2019 10:14:40 +0800</pubDate>
      
      <guid>https://codenow.me/tips/github_binds_dominname/</guid>
      <description>第一步： 1. 新建一个GitHub仓库，取名为your-github_name.github.io 2. 新建一个文件，取名为CNAME,填写内容为域名。不需要添加http或https。
第二步： 1. 在本地cmd中，ping第一步中新建的仓库名称。会返回一个ip地址，记录下该地址。
第三步： 1. 打开购买的云服务器，因为我购买的阿里云，所有在这上面进行操作演示。 2. 在控制台中打开域名管理。
 找到解析。添加如下信息：
A：对应cmd中ping的地址。
CNAME：对应新建的GitHub仓库名。  完成上述步骤后，配置完成。
参考网址</description>
    </item>
    
    <item>
      <title>dep package 依赖关系图</title>
      <link>https://codenow.me/tips/dep-visualizing-dependencies/</link>
      <pubDate>Sun, 31 Mar 2019 22:11:43 +0800</pubDate>
      
      <guid>https://codenow.me/tips/dep-visualizing-dependencies/</guid>
      <description>Linux:
$ sudo apt-get install graphviz $ dep status -dot | dot -T png | display macOS:
$ brew install graphviz $ dep status -dot | dot -T png | open -f -a /Applications/Preview.app Windows:
&amp;gt; choco install graphviz.portable &amp;gt; dep status -dot | dot -T png -o status.png; start status.</description>
    </item>
    
    <item>
      <title>Git_lg</title>
      <link>https://codenow.me/tips/git_lg/</link>
      <pubDate>Sun, 31 Mar 2019 20:41:50 +0800</pubDate>
      
      <guid>https://codenow.me/tips/git_lg/</guid>
      <description>git log 可以用来查看提交历史，但格式并不舒服，我们可以通过配置 git config 来解决这个问题：
运行
git config --global alias.lg &#39;log --pretty=format:&amp;quot;%h - %an, %ad : %s&amp;quot; --date=format:&amp;quot;%Y-%m-%d %H:%M:%S&amp;quot;&#39;
之后，便可以使用 git lg 来查看精简版本的，更舒服的提交历史了，如本项目现在看的话会变成
80504ec - jarvis, 2019-03-31 13:58:55 : add origin article link df1bcfd - jarvis, 2019-03-31 13:51:45 : Second week atts of jarvys eede6bf - chuntao.han, 2019-03-30 17:33:10 : hanchuntao translation checkin 1 769b56b - chuntao.han, 2019-03-30 13:07:45 : hanchuntao tips checkin 1 5507805 - chuntao.han, 2019-03-30 12:41:09 : add algorithm for mistake ef5c5a8 - CTubby, 2019-03-30 12:04:58 : tubby checkin d698c58 - chuntao.</description>
    </item>
    
    <item>
      <title>Idea 前进后退快捷键</title>
      <link>https://codenow.me/tips/idea-%E5%89%8D%E8%BF%9B%E5%90%8E%E9%80%80%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Sun, 31 Mar 2019 13:25:00 +0800</pubDate>
      
      <guid>https://codenow.me/tips/idea-%E5%89%8D%E8%BF%9B%E5%90%8E%E9%80%80%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>前进：Command + ]
后退：Command + [
在追踪比较复杂的代码时，比较有用，可以快速前进后退，不至于迷失在代码中。</description>
    </item>
    
    <item>
      <title>Python_code_static_analysis_tool_summary</title>
      <link>https://codenow.me/tips/python_code_static_analysis_tool_summary/</link>
      <pubDate>Sat, 30 Mar 2019 13:03:10 +0800</pubDate>
      
      <guid>https://codenow.me/tips/python_code_static_analysis_tool_summary/</guid>
      <description> 1.Pylint  Pylint是Python代码的一个静态检查工具，它能够检测一系列的代码错误，代码坏味道和格式错误。
Pylint使用的编码格式类似于PEP-8。
它的最新版本还提供代码复杂度的相关统计数据，并能打印相应报告。
不过在检查之前，Pylint需要先执行代码。
具体可以参考http://pylint.org
 2. Pyflakes  Pyflakes相对于Pylint而言出现的时间较晚，不同于Pylint的是，它不需要在检查之前执行代码来获取代码中的错误。
Pyflakes不检查代码的格式错误，只检查逻辑错误。
具体可以参考http://launchpad.net/pyflakes
 3. McCabe  McCabe是一个脚本，根据McCabe指标检查代码复杂性并打印报告。
具体可以参考https://pypi.org/project/mccabe/
 4. Pycodestyle  Pycodestyle是一个按照PEP-8的部分内容检查Python代码的一个工具
这个工具之前叫PEP-8。
具体可以参考https://github.com/pycqa/pycodestyle
 5. Flake8  Flake8封装了Pyflakes、McCabe和Pycodestyle工具，它可以执行这三个工具提供的检查
具体可以参考https://github.com/pycqa/flake8
 6. Pychecker  PyChecker是Python代码的静态分析工具，它能够帮助查找Python代码的bug，而且能够对代码的复杂度和格式等提出警告。
PyChecker会导入所检查文件中包含的模块，检查导入是否正确，同时检查文件中的函数、类和方法等。
具体可以参考https://pypi.org/project/PyChecker/
 7. Black  Black 号称是不妥协的 Python 代码格式化工具。之所以成为“不妥协”是因为它检测到不符合规范的代码风格直接就帮你全部格式化好，根本不需要你确定，直接替你做好决定。而作为回报，Black 提供了快速的速度。
Black 通过产生最小的差异来更快地进行代码审查。
Black 的使用非常简单，安装成功后，和其他系统命令一样使用，只需在 black 命令后面指定需要格式化的文件或者目录即可。
具体可以参考https://atom.io/packages/python-black
 </description>
    </item>
    
    <item>
      <title>Different rsa for different github account in the same computer</title>
      <link>https://codenow.me/tips/differen_rsa/</link>
      <pubDate>Sat, 30 Mar 2019 10:14:40 +0800</pubDate>
      
      <guid>https://codenow.me/tips/differen_rsa/</guid>
      <description>在同一个电脑上为不同的GitHub账号创建rsa并实现关联。 操作命令行。
#为第一个账号创建rsa文件 ssh-keygen -t rsa -C &amp;#34;your email&amp;#34; -f ~/.ssh/id_rsa_for_account1 #为第二个账号创建rsa文件 ssh-keygen -t rsa -C &amp;#34;your email&amp;#34; -f ~/.ssh/id_rsa_for_account2 在.ssh文件夹下创建config文件 输入如下内容：
#Default GitHub Host account1 HostName github.com User git IdentityFile ~/.ssh/id_rsa_for_account1 Host account2 HostName github.com User git IdentityFile ~/.ssh/id_rsa_for_account2  然后分别在account1和account2GitHub中添加公钥。 验证
ssh -T account1 ssh -T account2  </description>
    </item>
    
    <item>
      <title>Go tool pptof</title>
      <link>https://codenow.me/tips/go-pptof/</link>
      <pubDate>Sun, 24 Mar 2019 23:50:03 +0800</pubDate>
      
      <guid>https://codenow.me/tips/go-pptof/</guid>
      <description>使用 go tool pptof 可以 debug 程序
需要在程序中先 import
import _ &amp;#34;net/http/pprof&amp;#34; 然后启动一个 goroutine 用于远程访问
go func() { log.Println(http.ListenAndServe(&amp;#34;localhost:6060&amp;#34;, nil)) }() 最后我们就可使用 http 抓取一些关键指标
 go tool pprof http://localhost:6060/debug/pprof/heap go tool pprof http://localhost:6060/debug/pprof/profile?seconds=30 go tool pprof http://localhost:6060/debug/pprof/block wget http://localhost:6060/debug/pprof/trace?seconds=5 go tool pprof http://localhost:6060/debug/pprof/mutex  </description>
    </item>
    
    <item>
      <title>[Mysql]Is Varchar a Number?</title>
      <link>https://codenow.me/tips/is_varchar_a_number/</link>
      <pubDate>Sun, 24 Mar 2019 22:38:28 +0800</pubDate>
      
      <guid>https://codenow.me/tips/is_varchar_a_number/</guid>
      <description>判断 MySQL 里一个 varchar 字段的内容是否为数字：
select * from table_name where length(0+name) = length(name);</description>
    </item>
    
    <item>
      <title>golang 项目添加 debug 日志的小技巧</title>
      <link>https://codenow.me/tips/tips-for-adding-debug-logs/</link>
      <pubDate>Sun, 24 Mar 2019 18:57:21 +0800</pubDate>
      
      <guid>https://codenow.me/tips/tips-for-adding-debug-logs/</guid>
      <description>之所以整理这方面的小技巧，主要是 golang 的开源项目都是像 TiDB、etcd 这种偏低层的分布式服务。用 debugger 来跟踪代码是比较困难的，容易出错，而且还容易遇到坑，比如：有的 golang 版本无法正确输出调试信息，mac 上有些开源项目调试模式无法正常运行等等。用日志的话，更简单直接，不容易遇到坑。只不过，在查看变量、查看调用栈方面是真不太方便，下面几个小技巧能够弥补一些吧。
查看调用栈
可以使用 debug.Stack() 方法获取调用栈信息，比如像下面这样：
log.Printf(&amp;#34;stack of function xxx: %v&amp;#34;, string(debug.Stack())) 不过，在日志中打印调用栈的方法还是要慎用，输出内容有时候太长了，影响日志的连贯性。可以考虑将栈信息再做一下处理，只保留最上面几层的调用信息。
查看变量类型
可以使用 %T 来查看变量类型，很多时候可以像下面这样简单查看一下变量的类型和取值：
log.Printf(&amp;#34;DEBUG: node type: %T, value: %v&amp;#34;, n, n) 使用 buffer 来收集要查看的变量信息
有的时候，我们需要查看的不是一个变量，可能是多个变量或者一个复杂数据结构中的一部分字段，如果代码中没有给出满足需求的 String 方法的话，可以考虑用 buffer，自己一点点收集，就像下面这样：
buf := bytes.NewBufferString() fmt.Fprintf(buf, &amp;#34;a: %v, &amp;#34;, a) fmt.Fprintf(buf, &amp;#34;b.child: %v, &amp;#34;, b) fmt.Fprintf(buf, &amp;#34;c.parent: %v, &amp;#34;, c.parent) log.Printf(&amp;#34;%v&amp;#34;, buf.</description>
    </item>
    
  </channel>
</rss>