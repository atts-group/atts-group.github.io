<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on ATTS</title>
    <link>https://codenow.me/tips/</link>
    <description>Recent content in Tips on ATTS</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 15 Mar 2019 07:28:29 +0000</lastBuildDate>
    
	<atom:link href="https://codenow.me/tips/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Idea 前进后退快捷键</title>
      <link>https://codenow.me/tips/idea-%E5%89%8D%E8%BF%9B%E5%90%8E%E9%80%80%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Sun, 31 Mar 2019 13:25:00 +0800</pubDate>
      
      <guid>https://codenow.me/tips/idea-%E5%89%8D%E8%BF%9B%E5%90%8E%E9%80%80%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>前进：Command + ]
后退：Command + [
在追踪比较复杂的代码时，比较有用，可以快速前进后退，不至于迷失在代码中。</description>
    </item>
    
    <item>
      <title>Python_code_static_analysis_tool_summary</title>
      <link>https://codenow.me/tips/python_code_static_analysis_tool_summary/</link>
      <pubDate>Sat, 30 Mar 2019 13:03:10 +0800</pubDate>
      
      <guid>https://codenow.me/tips/python_code_static_analysis_tool_summary/</guid>
      <description> 1.Pylint  Pylint是Python代码的一个静态检查工具，它能够检测一系列的代码错误，代码坏味道和格式错误。
Pylint使用的编码格式类似于PEP-8。
它的最新版本还提供代码复杂度的相关统计数据，并能打印相应报告。
不过在检查之前，Pylint需要先执行代码。
具体可以参考http://pylint.org
 2. Pyflakes  Pyflakes相对于Pylint而言出现的时间较晚，不同于Pylint的是，它不需要在检查之前执行代码来获取代码中的错误。
Pyflakes不检查代码的格式错误，只检查逻辑错误。
具体可以参考http://launchpad.net/pyflakes
 3. McCabe  McCabe是一个脚本，根据McCabe指标检查代码复杂性并打印报告。
具体可以参考https://pypi.org/project/mccabe/
 4. Pycodestyle  Pycodestyle是一个按照PEP-8的部分内容检查Python代码的一个工具
这个工具之前叫PEP-8。
具体可以参考https://github.com/pycqa/pycodestyle
 5. Flake8  Flake8封装了Pyflakes、McCabe和Pycodestyle工具，它可以执行这三个工具提供的检查
具体可以参考https://github.com/pycqa/flake8
 6. Pychecker  PyChecker是Python代码的静态分析工具，它能够帮助查找Python代码的bug，而且能够对代码的复杂度和格式等提出警告。
PyChecker会导入所检查文件中包含的模块，检查导入是否正确，同时检查文件中的函数、类和方法等。
具体可以参考https://pypi.org/project/PyChecker/
 7. Black  Black 号称是不妥协的 Python 代码格式化工具。之所以成为“不妥协”是因为它检测到不符合规范的代码风格直接就帮你全部格式化好，根本不需要你确定，直接替你做好决定。而作为回报，Black 提供了快速的速度。
Black 通过产生最小的差异来更快地进行代码审查。
Black 的使用非常简单，安装成功后，和其他系统命令一样使用，只需在 black 命令后面指定需要格式化的文件或者目录即可。
具体可以参考https://atom.io/packages/python-black
 </description>
    </item>
    
    <item>
      <title>Different rsa for different github account in the same computer</title>
      <link>https://codenow.me/tips/differen_rsa/</link>
      <pubDate>Sat, 30 Mar 2019 10:14:40 +0800</pubDate>
      
      <guid>https://codenow.me/tips/differen_rsa/</guid>
      <description>在同一个电脑上为不同的GitHub账号创建rsa并实现关联。 操作命令行。
#为第一个账号创建rsa文件 ssh-keygen -t rsa -C &amp;#34;your email&amp;#34; -f ~/.ssh/id_rsa_for_account1 #为第二个账号创建rsa文件 ssh-keygen -t rsa -C &amp;#34;your email&amp;#34; -f ~/.ssh/id_rsa_for_account2 在.ssh文件夹下创建config文件 输入如下内容：
#Default GitHub Host account1 HostName github.com User git IdentityFile ~/.ssh/id_rsa_for_account1 Host account2 HostName github.com User git IdentityFile ~/.ssh/id_rsa_for_account2  然后分别在account1和account2GitHub中添加公钥。 验证
ssh -T account1 ssh -T account2  </description>
    </item>
    
    <item>
      <title>Go tool pptof</title>
      <link>https://codenow.me/tips/go-pptof/</link>
      <pubDate>Sun, 24 Mar 2019 23:50:03 +0800</pubDate>
      
      <guid>https://codenow.me/tips/go-pptof/</guid>
      <description>使用 go tool pptof 可以 debug 程序
需要在程序中先 import
import _ &amp;#34;net/http/pprof&amp;#34; 然后启动一个 goroutine 用于远程访问
go func() { log.Println(http.ListenAndServe(&amp;#34;localhost:6060&amp;#34;, nil)) }() 最后我们就可使用 http 抓取一些关键指标
 go tool pprof http://localhost:6060/debug/pprof/heap go tool pprof http://localhost:6060/debug/pprof/profile?seconds=30 go tool pprof http://localhost:6060/debug/pprof/block wget http://localhost:6060/debug/pprof/trace?seconds=5 go tool pprof http://localhost:6060/debug/pprof/mutex  </description>
    </item>
    
    <item>
      <title>[Mysql]Is Varchar a Number?</title>
      <link>https://codenow.me/tips/is_varchar_a_number/</link>
      <pubDate>Sun, 24 Mar 2019 22:38:28 +0800</pubDate>
      
      <guid>https://codenow.me/tips/is_varchar_a_number/</guid>
      <description>判断 MySQL 里一个 varchar 字段的内容是否为数字：
select * from table_name where length(0+name) = length(name);</description>
    </item>
    
    <item>
      <title>golang 项目添加 debug 日志的小技巧</title>
      <link>https://codenow.me/tips/tips-for-adding-debug-logs/</link>
      <pubDate>Sun, 24 Mar 2019 18:57:21 +0800</pubDate>
      
      <guid>https://codenow.me/tips/tips-for-adding-debug-logs/</guid>
      <description>之所以整理这方面的小技巧，主要是 golang 的开源项目都是像 TiDB、etcd 这种偏低层的分布式服务。用 debugger 来跟踪代码是比较困难的，容易出错，而且还容易遇到坑，比如：有的 golang 版本无法正确输出调试信息，mac 上有些开源项目调试模式无法正常运行等等。用日志的话，更简单直接，不容易遇到坑。只不过，在查看变量、查看调用栈方面是真不太方便，下面几个小技巧能够弥补一些吧。
查看调用栈
可以使用 debug.Stack() 方法获取调用栈信息，比如像下面这样：
log.Printf(&amp;#34;stack of function xxx: %v&amp;#34;, string(debug.Stack())) 不过，在日志中打印调用栈的方法还是要慎用，输出内容有时候太长了，影响日志的连贯性。可以考虑将栈信息再做一下处理，只保留最上面几层的调用信息。
查看变量类型
可以使用 %T 来查看变量类型，很多时候可以像下面这样简单查看一下变量的类型和取值：
log.Printf(&amp;#34;DEBUG: node type: %T, value: %v&amp;#34;, n, n) 使用 buffer 来收集要查看的变量信息
有的时候，我们需要查看的不是一个变量，可能是多个变量或者一个复杂数据结构中的一部分字段，如果代码中没有给出满足需求的 String 方法的话，可以考虑用 buffer，自己一点点收集，就像下面这样：
buf := bytes.NewBufferString() fmt.Fprintf(buf, &amp;#34;a: %v, &amp;#34;, a) fmt.Fprintf(buf, &amp;#34;b.child: %v, &amp;#34;, b) fmt.Fprintf(buf, &amp;#34;c.parent: %v, &amp;#34;, c.parent) log.Printf(&amp;#34;%v&amp;#34;, buf.</description>
    </item>
    
  </channel>
</rss>