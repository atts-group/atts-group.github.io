<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on ATTS</title>
    <link>https://codenow.me/tips/</link>
    <description>Recent content in Tips on ATTS</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 15 Mar 2019 07:28:29 +0000</lastBuildDate>
    
	<atom:link href="https://codenow.me/tips/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go tool pptof</title>
      <link>https://codenow.me/tips/go-pptof/</link>
      <pubDate>Sun, 24 Mar 2019 23:50:03 +0800</pubDate>
      
      <guid>https://codenow.me/tips/go-pptof/</guid>
      <description>使用 go tool pptof 可以 debug 程序
需要在程序中先 import
import _ &amp;#34;net/http/pprof&amp;#34; 然后启动一个 goroutine 用于远程访问
go func() { log.Println(http.ListenAndServe(&amp;#34;localhost:6060&amp;#34;, nil)) }() 最后我们就可使用 http 抓取一些关键指标
 go tool pprof http://localhost:6060/debug/pprof/heap go tool pprof http://localhost:6060/debug/pprof/profile?seconds=30 go tool pprof http://localhost:6060/debug/pprof/block wget http://localhost:6060/debug/pprof/trace?seconds=5 go tool pprof http://localhost:6060/debug/pprof/mutex  </description>
    </item>
    
    <item>
      <title>[Mysql]Is Varchar a Number?</title>
      <link>https://codenow.me/tips/is_varchar_a_number/</link>
      <pubDate>Sun, 24 Mar 2019 22:38:28 +0800</pubDate>
      
      <guid>https://codenow.me/tips/is_varchar_a_number/</guid>
      <description>判断 MySQL 里一个 varchar 字段的内容是否为数字：
select * from table_name where length(0+name) = length(name);</description>
    </item>
    
    <item>
      <title>golang 项目添加 debug 日志的小技巧</title>
      <link>https://codenow.me/tips/tips-for-adding-debug-logs/</link>
      <pubDate>Sun, 24 Mar 2019 18:57:21 +0800</pubDate>
      
      <guid>https://codenow.me/tips/tips-for-adding-debug-logs/</guid>
      <description>之所以整理这方面的小技巧，主要是 golang 的开源项目都是像 TiDB、etcd 这种偏低层的分布式服务。用 debugger 来跟踪代码是比较困难的，容易出错，而且还容易遇到坑，比如：有的 golang 版本无法正确输出调试信息，mac 上有些开源项目调试模式无法正常运行等等。用日志的话，更简单直接，不容易遇到坑。只不过，在查看变量、查看调用栈方面是真不太方便，下面几个小技巧能够弥补一些吧。
查看调用栈
可以使用 debug.Stack() 方法获取调用栈信息，比如像下面这样：
log.Printf(&amp;#34;stack of function xxx: %v&amp;#34;, string(debug.Stack())) 不过，在日志中打印调用栈的方法还是要慎用，输出内容有时候太长了，影响日志的连贯性。可以考虑将栈信息再做一下处理，只保留最上面几层的调用信息。
查看变量类型
可以使用 %T 来查看变量类型，很多时候可以像下面这样简单查看一下变量的类型和取值：
log.Printf(&amp;#34;DEBUG: node type: %T, value: %v&amp;#34;, n, n) 使用 buffer 来收集要查看的变量信息
有的时候，我们需要查看的不是一个变量，可能是多个变量或者一个复杂数据结构中的一部分字段，如果代码中没有给出满足需求的 String 方法的话，可以考虑用 buffer，自己一点点收集，就像下面这样：
buf := bytes.NewBufferString() fmt.Fprintf(buf, &amp;#34;a: %v, &amp;#34;, a) fmt.Fprintf(buf, &amp;#34;b.child: %v, &amp;#34;, b) fmt.Fprintf(buf, &amp;#34;c.parent: %v, &amp;#34;, c.parent) log.Printf(&amp;#34;%v&amp;#34;, buf.</description>
    </item>
    
  </channel>
</rss>