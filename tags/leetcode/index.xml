<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leetcode on ATTS</title>
    <link>https://codenow.me/tags/leetcode/</link>
    <description>Recent content in Leetcode on ATTS</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 19 May 2019 15:03:07 +0900</lastBuildDate>
    
	<atom:link href="https://codenow.me/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leetcode_917: Reverse Only Letters</title>
      <link>https://codenow.me/algorithm/leetcode_917_reverse_only_letters/</link>
      <pubDate>Sun, 19 May 2019 15:03:07 +0900</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode_917_reverse_only_letters/</guid>
      <description>题号：917 难度：easy 链接：https://leetcode.com/problems/reverse-only-letters/ 描述：只反转字符串中的字母  class Solution: def reverseOnlyLetters(self, S: str) -&amp;gt; str: # solution 1 # new_list = [] # for s in S[::-1]: # if s.isalpha(): # new_list.append(s) # for i,s in enumerate(S): # if not s.isalpha(): # new_list.insert(i, s) # return &amp;#39;&amp;#39;.join(new_list) # solution 2 S = list(S) left, right = 0, len(S)-1 while left &amp;lt;= right: if S[left].isalpha() and S[right].isalpha(): S[left], S[right] = S[right], S[left] left += 1 right -= 1 elif S[left].</description>
    </item>
    
    <item>
      <title>Leetcode_806: Number of Lines To Write String</title>
      <link>https://codenow.me/algorithm/leetcode_806_number_of_lines_to_write_string/</link>
      <pubDate>Sat, 11 May 2019 16:13:13 +0900</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode_806_number_of_lines_to_write_string/</guid>
      <description> 题号：806 难度：easy 链接：https://leetcode.com/problems/number-of-lines-to-write-string/ 描述：给出 26 个字母每个占位的宽度和一串字母字符串，每行宽度为 100， 当每行加上要输入下一个的字母宽度超过 100 的话这个字母就跳到下一行。求这串字母占多少行且最后一行占位宽度  class Solution: def numberOfLines(self, widths: List[int], S: str) -&amp;gt; List[int]: letter_list = [&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;d&amp;#34;, &amp;#34;e&amp;#34;, &amp;#34;f&amp;#34;,&amp;#34;g&amp;#34;,&amp;#34;h&amp;#34;,&amp;#34;i&amp;#34;,&amp;#34;j&amp;#34;,&amp;#34;k&amp;#34;,&amp;#34;l&amp;#34;,&amp;#34;m&amp;#34;,&amp;#34;n&amp;#34;,&amp;#34;o&amp;#34;,&amp;#34;p&amp;#34;,&amp;#34;q&amp;#34;,&amp;#34;r&amp;#34;,&amp;#34;s&amp;#34;,&amp;#34;t&amp;#34;,&amp;#34;u&amp;#34;,&amp;#34;v&amp;#34;,&amp;#34;w&amp;#34;,&amp;#34;x&amp;#34;,&amp;#34;y&amp;#34;,&amp;#34;z&amp;#34;] letter_d = dict(zip(letter_list, widths)) str_widths = 0 lines = 1 for letter in S: letter_width = letter_d[letter] if str_widths + letter_width &amp;gt; 100 * lines: str_widths = 100 * lines + letter_width lines += 1 else: str_widths += letter_width last_line_width = 100 - (lines * 100 - str_widths) res = [lines,last_line_width] return res </description>
    </item>
    
    <item>
      <title>Leetcode_938: Range Sum Of BST</title>
      <link>https://codenow.me/algorithm/leetcode_938_range_sum_of_bst/</link>
      <pubDate>Fri, 03 May 2019 18:49:11 +0900</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode_938_range_sum_of_bst/</guid>
      <description> 题号：938 难度：easy 链接：https://leetcode.com/problems/range-sum-of-bst/ 描述：返回一棵二叉搜索树两个节点之间的值的和，包括两个节点  class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None class Solution: def rangeSumBST(self, root: TreeNode, L: int, R: int) -&amp;gt; int: if not root: return 0 elif root.val &amp;lt; L: return self.rangeSumBST(root.right, L, R) elif root.val &amp;gt; R: return self.rangeSumBST(root.left, L, R) else: return root.val + self.rangeSumBST(root.right, L, R) + self.rangeSumBST(root.left, L, R)</description>
    </item>
    
    <item>
      <title>Leetcode_771: Jewels and Stones</title>
      <link>https://codenow.me/algorithm/jewels_and_stones/</link>
      <pubDate>Sun, 28 Apr 2019 22:50:02 +0900</pubDate>
      
      <guid>https://codenow.me/algorithm/jewels_and_stones/</guid>
      <description> 题号：771 难度：easy 链接：https://leetcode.com/problems/jewels-and-stones/ 描述：看看自己手上的石头有多少是宝石  class Solution: def newJewelsInStones(self,J,S): res = [] for s in S: if s in J: res.append(s) return len(res) if __name__ == &amp;#39;__main__&amp;#39;: s = Solution() Jewels = &amp;#34;aA&amp;#34; Stones = &amp;#34;aAAbbbb&amp;#34; s.newJewelsInStones(Jewels, Stones) </description>
    </item>
    
    <item>
      <title>Leetcode_100: same tree</title>
      <link>https://codenow.me/algorithm/same_tree/</link>
      <pubDate>Sun, 21 Apr 2019 17:52:54 +0900</pubDate>
      
      <guid>https://codenow.me/algorithm/same_tree/</guid>
      <description> 题号：100 难度：easy 链接：https://leetcode.com/problems/same-tree/ 描述：查看两棵树是否一致  class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None class Solution: def isSameTree(self, p: TreeNode, q: TreeNode) -&amp;gt; bool: if p and q: return p.val == q.val and self.isSameTree(p.right,q.right) and self.isSameTree(p.left,q.left) return p == q if __name__ == &amp;#39;__main__&amp;#39;: s = Solution() tree1 = TreeNode(&amp;#39;s&amp;#39;) tree2 = TreeNode(&amp;#39;s&amp;#39;) s.isSameTree(tree1, tree2)</description>
    </item>
    
    <item>
      <title>Leetcode_709: To Lower Case</title>
      <link>https://codenow.me/algorithm/to_lowercase/</link>
      <pubDate>Sun, 07 Apr 2019 14:12:27 +0900</pubDate>
      
      <guid>https://codenow.me/algorithm/to_lowercase/</guid>
      <description>题号：709 难度：easy 链接：https://leetcode.com/problems/to-lower-case/ 描述：使用 ASCII 把字母统一为小写  class Solution: &amp;#34;&amp;#34;&amp;#34;use ASCII to return the same str in lowercase &amp;#34;&amp;#34;&amp;#34; def to_lower_case(self, str: str) -&amp;gt; str: new_str = &amp;#39;&amp;#39; for c in str: if 65 &amp;lt;= ord(c) &amp;lt;= 90: # Uppercase is between 65 and 90 in ASCII table c = chr(ord(c)+32) new_str += c return new_str # one line solution #return &amp;#39;&amp;#39;.join(chr(ord(c) + 32) if 65 &amp;lt;= ord(c) &amp;lt;= 90 else c for c in str) if __name__ == &amp;#39;__main__&amp;#39;: solution = Solution() s = &amp;#39;Hero&amp;#39; solution.</description>
    </item>
    
  </channel>
</rss>