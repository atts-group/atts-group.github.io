<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on ATTS</title>
    <link>https://codenow.me/algorithm/</link>
    <description>Recent content in 算法 on ATTS</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 15 Mar 2019 07:28:29 +0000</lastBuildDate>
    
	<atom:link href="https://codenow.me/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leetcode 100: same tree</title>
      <link>https://codenow.me/algorithm/same_tree/</link>
      <pubDate>Sun, 21 Apr 2019 17:52:54 +0900</pubDate>
      
      <guid>https://codenow.me/algorithm/same_tree/</guid>
      <description>题号：100 难度：easy 链接：same tree
Definition for a binary tree node. class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None class Solution: def isSameTree(self, p: TreeNode, q: TreeNode) -&amp;gt; bool: if p and q: return p.val == q.val and self.isSameTree(p.right,q.right) and self.isSameTree(p.left,q.left) return p == q if __name__ == &amp;#39;__main__&amp;#39;: s = Solution() tree1 = TreeNode(&amp;#39;s&amp;#39;) tree2 = TreeNode(&amp;#39;s&amp;#39;) s.isSameTree(tree1, tree2)</description>
    </item>
    
    <item>
      <title>Leetcode 3 Longest Substring Without Repeating Characters</title>
      <link>https://codenow.me/algorithm/leetcode_3_longest_substring_without_repeating_characters/</link>
      <pubDate>Sat, 20 Apr 2019 10:43:56 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode_3_longest_substring_without_repeating_characters/</guid>
      <description>题号：3 难度：medium 链接：https://leetcode.com/problems/longest-substring-without-repeating-characters/
 如下为Python3代码
class Solution(object): def lengthOfLongestSubstring(self, s): &amp;#34;&amp;#34;&amp;#34; :type s: str :rtype: int &amp;#34;&amp;#34;&amp;#34; b, m, d = 0, 0, {} for i, l in enumerate(s): b, m, d[l] = max(b, d.get(l, -1) + 1), max(m, i - b), i return max(m, len(s) - b)  参考内容</description>
    </item>
    
    <item>
      <title>Leetcode 14 Longest Common Prefix</title>
      <link>https://codenow.me/algorithm/leetcode-14-longest-common-prefix/</link>
      <pubDate>Mon, 15 Apr 2019 00:08:57 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode-14-longest-common-prefix/</guid>
      <description>题号：14
难度：easy
链接：https://leetcode.com/problems/longest-common-prefix
描述：多个字符串找公共子串(a-z)
 from typing import List class Solution: def longestCommonPrefix2(self, strs: List[str]) -&amp;gt; str: &amp;#34;&amp;#34;&amp;#34;简单粗暴的方式&amp;#34;&amp;#34;&amp;#34; res = &amp;#39;&amp;#39; if not strs: return res for char in zip(*strs): if len(set(char)) == 1: res += char[0] else: return res return res def longestCommonPrefix(self, strs: List[str]) -&amp;gt; str: &amp;#34;&amp;#34;&amp;#34;不需要一个一个字符地加，只需要找到分界点，一次性取出即可&amp;#34;&amp;#34;&amp;#34; if not strs: return &amp;#39;&amp;#39; for i, letter_group in enumerate(zip(*strs)): if len(set(letter_group)) &amp;gt; 1: return strs[0][:i] else: return min(strs) if __name__ == &amp;#39;__main__&amp;#39;: a = [&amp;#34;flower&amp;#34;,&amp;#34;flow&amp;#34;,&amp;#34;flight&amp;#34;] res = Solution().</description>
    </item>
    
    <item>
      <title>Leetcode 49 Graph Anagrams</title>
      <link>https://codenow.me/algorithm/leetcode-49-graph-anagrams/</link>
      <pubDate>Sun, 14 Apr 2019 22:37:32 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode-49-graph-anagrams/</guid>
      <description>原题链接 ，难度 Medium：
class Solution: def groupAnagrams(self, strs): &amp;#34;&amp;#34;&amp;#34; :type strs: List[str] :rtype: List[List[str]] &amp;#34;&amp;#34;&amp;#34; memo = {} for s in strs: s_ = &amp;#39;&amp;#39;.join(sorted(s)) if s_ in memo: memo[s_].append(s) else: memo[s_] = [s] result = [] for key in memo: result.append(memo[key]) return result</description>
    </item>
    
    <item>
      <title>Leetcode: 139 Word Break</title>
      <link>https://codenow.me/algorithm/word-break/</link>
      <pubDate>Sun, 14 Apr 2019 21:57:23 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/word-break/</guid>
      <description> 题号：139
难度：中等
链接：https://leetcode-cn.com/problems/word-break/submissions/
 class Solution: def wordBreak(self, s: str, wordDict: List[str]) -&amp;gt; bool: if not s: return True word_idx = [0] for i in range(len(s) + 1): for j in word_idx: if s[j:i] in wordDict: word_idx.append(i) break return word_idx[-1] == len(s)</description>
    </item>
    
    <item>
      <title>Leetcode_216_Combination_Sum_III</title>
      <link>https://codenow.me/algorithm/leetcode_216_combination_sum_iii/</link>
      <pubDate>Sun, 14 Apr 2019 18:10:33 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode_216_combination_sum_iii/</guid>
      <description>题号：216 难度：Medium 链接：https://leetcode.com/problems/combination-sum-iii/
#!/usr/bin/python # -*- coding: utf-8 -*- class Solution: def combinationSum3(self, k, n): result_list = [] def f(k, n, cur, next): if len(cur) == k: if sum(cur) == n: result_list.append(cur) return for i in range(next, n+1): f(k, n, cur+[i], i+1) f(k, n, [], 1) return result_list if __name__ == &amp;#39;__main__&amp;#39;: k = 3 n = 7 print(Solution().combinationSum3(k, n)) k = 3 n = 9 print(Solution().combinationSum3(k, n)) C:\Python37\python.exe C:/python_workspace/leecode/array/leecode_216.py [[1, 2, 4]] [[1, 2, 6], [1, 3, 5], [2, 3, 4]]</description>
    </item>
    
    <item>
      <title>使用递归思想进行列表遍历</title>
      <link>https://codenow.me/algorithm/travelsallistwithoutloops/</link>
      <pubDate>Sun, 14 Apr 2019 16:46:49 +0900</pubDate>
      
      <guid>https://codenow.me/algorithm/travelsallistwithoutloops/</guid>
      <description>之前一次面试上遇到的题，不允许用 for 循环和 while 循环，要求遍历出列表每个元素。 当时没有想法，回去后就查了一下，原来可以用递归解决。
class Solution(): def travelsal_list_with_recursion(self, Ls, index=0): if len(Ls) == index: return print(Ls[index], end=&amp;#39; &amp;#39;) self.travelsal_list_with_recursion(Ls, index+1) if __name__ == &amp;#39;__main__&amp;#39;: s = Solution() ls = [&amp;#39;a&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;3&amp;#39;] s.travelsal_list_with_recursion(ls) </description>
    </item>
    
    <item>
      <title>Leetcode: 2 Add Two Numbers</title>
      <link>https://codenow.me/algorithm/leetcode_2_add_two_numbers/</link>
      <pubDate>Sat, 13 Apr 2019 17:30:32 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode_2_add_two_numbers/</guid>
      <description>题号：2
难度：Medium
链接：https://leetcode.com/problems/add-two-numbers/
如下是 python3 代码
 # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def addTwoNumbers(self, l1, l2): &amp;#34;&amp;#34;&amp;#34; :type l1: ListNode :type l2: ListNode :rtype: ListNode &amp;#34;&amp;#34;&amp;#34; if l1.next is None and l1.val == 0: return l2 if l2.next is None and l2.val == 0: return l1 str1 = &amp;#39;&amp;#39; str2 = &amp;#39;&amp;#39; while l1: str1 = str(l1.</description>
    </item>
    
    <item>
      <title>Leetcode 13 Roman to Integer</title>
      <link>https://codenow.me/algorithm/leetcode-13-roman-to-integer/</link>
      <pubDate>Sun, 07 Apr 2019 23:55:16 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode-13-roman-to-integer/</guid>
      <description>题号：13
难度：easy
链接：https://leetcode.com/problems/roman-to-integer
描述：罗马数字转阿拉伯数字(1-3999)
 class Solution(object): def romanToInt1(self, s: str) -&amp;gt; int: &amp;quot;&amp;quot;&amp;quot;仿照上一题的无脑解法，先直接怼一个出来&amp;quot;&amp;quot;&amp;quot; ten = [&#39;&#39;, &#39;I&#39;, &#39;II&#39;, &#39;III&#39;, &#39;IV&#39;, &#39;V&#39;, &#39;VI&#39;, &#39;VII&#39;, &#39;VIII&#39;, &#39;IX&#39;] res = 0 if s.startswith(&#39;MMM&#39;): res += 3000 s = s[3:] elif s.startswith(&#39;MM&#39;): res += 2000 s = s[2:] elif s.startswith(&#39;M&#39;): res += 1000 s = s[1:] if s.startswith(&#39;CM&#39;): res += 900 s = s[2:] elif s.startswith(&#39;D&#39;): res += 500 s = s[1:] elif s.</description>
    </item>
    
    <item>
      <title>Leetcode_283_Move_Zeroes</title>
      <link>https://codenow.me/algorithm/leetcode_283_move_zeroes/</link>
      <pubDate>Sun, 07 Apr 2019 23:13:23 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode_283_move_zeroes/</guid>
      <description> 题号：283 难度：Easy 链接：https://leetcode.com/problems/move-zeroes/
 #!/usr/bin/python # -*- coding:utf-8 -*- class Solution: def moveZeroes(self, nums): &amp;#34;&amp;#34;&amp;#34; Do not return anything, modify nums in-place instead. &amp;#34;&amp;#34;&amp;#34; empty_index_list = [] for i in range(len(nums)): if i == 0: empty_index_list.append(i) elif empty_index_list: nums[empty_index_list.pop(0)] = nums[i] if empty_index_list: for i in range(len(empty_index_list)): nums[len(nums)-i] = 0</description>
    </item>
    
    <item>
      <title>K近邻算法</title>
      <link>https://codenow.me/algorithm/knn/</link>
      <pubDate>Sun, 07 Apr 2019 20:42:56 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/knn/</guid>
      <description>K-近邻算法（KNN）  算法思想： 存在一个训练样本集，并且样本数据集中每个数据都存在标签。将新数据的每个特征与样本数据集中数据对应的特征进行比较，然后算法提取前K个相似的数据。
 优缺点及适用范围： 优点：精度高、对异常值不敏感、无数据输入假定；
缺点：计算复杂度高、空间复杂度高；
使用数据范围：数值型和标称型
 计算距离公式  示例分析：约会人员属性 使用的库 Numpy operator  读取数据：将文本记录转化为Numpy矩阵 def file2matrix(filename): fr = open(filename) arrayOLines = fr.readlines() numberOfLines = len(arrayOLines) returnMat = zeros((numberOfLines, 3)) # 创建numpy矩阵 1000行,3列 classLabelVector = [] # 类标签向量 index = 0 for line in arrayOLines: # 逐行填充矩阵和标签向量 line = line.strip() listFromLine = line.split(&#39;\t&#39;) returnMat[index, :] = listFromLine[0:3] classLabelVector.append(int(listFromLine[-1])) index += 1 return returnMat, classLabelVector  处理数据：归一化数值(min-max标准化) def autoNorm(dataSet): minValue = dataSet.</description>
    </item>
    
    <item>
      <title>Leetcode: 148 Sort List</title>
      <link>https://codenow.me/algorithm/leetcode_148_sort_list/</link>
      <pubDate>Sun, 07 Apr 2019 20:21:28 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode_148_sort_list/</guid>
      <description>题号：148
难度：中等
链接：https://leetcode-cn.com/problems/sort-list/submissions/
 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func sortList(head *ListNode) *ListNode { quickSort(head, nil) return head } func getPartion(start *ListNode, end *ListNode) *ListNode { key := start.Val i := start j := start.Next for j != end { if (j.Val &amp;lt; key) { i = i.Next i.Val, j.Val = j.Val, i.Val } j = j.</description>
    </item>
    
    <item>
      <title>Leetcode Find K Pairs With Smallest Sums</title>
      <link>https://codenow.me/algorithm/leetcode-find-k-pairs-with-smallest-sums/</link>
      <pubDate>Sun, 07 Apr 2019 16:05:27 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode-find-k-pairs-with-smallest-sums/</guid>
      <description>原题链接: 373. Find K Pairs with Smallest Sums
典型的 Kth elements 问题，使用堆就行：
import heapq class Solution: def kSmallestPairs(self, nums1: &amp;#39;List[int]&amp;#39;, nums2: &amp;#39;List[int]&amp;#39;, k: &amp;#39;int&amp;#39;) -&amp;gt; &amp;#39;List[List[int]]&amp;#39;: if len(nums1) == 0 or len(nums2) == 0: return [] q = [] for n1 in nums1: for n2 in nums2: heapq.heappush(q, (n1 + n2, n1, n2)) i = k ret = [] while i &amp;gt; 0 and len(q) &amp;gt; 0: item = heapq.heappop(q) ret.</description>
    </item>
    
    <item>
      <title>Leetcode: 709 To Lower Case</title>
      <link>https://codenow.me/algorithm/to_lowercase/</link>
      <pubDate>Sun, 07 Apr 2019 14:12:27 +0900</pubDate>
      
      <guid>https://codenow.me/algorithm/to_lowercase/</guid>
      <description>题号：709 难度：easy 链接：原题 描述：使用 ASCII 把字母统一为小写 class Solution: &amp;#34;&amp;#34;&amp;#34;use ASCII to return the same str in lowercase &amp;#34;&amp;#34;&amp;#34; def to_lower_case(self, str: str) -&amp;gt; str: new_str = &amp;#39;&amp;#39; for c in str: if 65 &amp;lt;= ord(c) &amp;lt;= 90: # Uppercase is between 65 and 90 in ASCII table c = chr(ord(c)+32) new_str += c return new_str # one line solution #return &amp;#39;&amp;#39;.join(chr(ord(c) + 32) if 65 &amp;lt;= ord(c) &amp;lt;= 90 else c for c in str) if __name__ == &amp;#39;__main__&amp;#39;: solution = Solution() s = &amp;#39;Hero&amp;#39; solution.</description>
    </item>
    
    <item>
      <title>Leetcode 165: Compare Version Numbers</title>
      <link>https://codenow.me/algorithm/leetcode_165_compare-version-numbers/</link>
      <pubDate>Sun, 31 Mar 2019 22:17:14 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode_165_compare-version-numbers/</guid>
      <description> 题号：165
难度：medium
链接：https://leetcode-cn.com/problems/compare-version-numbers/
 class Solution: def compareVersion(self, version1: str, version2: str) -&amp;gt; int: vers1 = version1.split(&amp;#34;.&amp;#34;) vers2 = version2.split(&amp;#34;.&amp;#34;) diff = len(vers1) - len(vers2) if diff &amp;gt; 0: vers2 += [&amp;#39;0&amp;#39;] * abs(diff) elif diff &amp;lt; 0: vers1 += [&amp;#39;0&amp;#39;] * abs(diff) else: pass for i, v1 in enumerate(vers1): v1, v2 = int(v1), int(vers2[i]) if v1 &amp;gt; v2: return 1 elif v1 &amp;lt; v2: return -1 else: continue return 0</description>
    </item>
    
    <item>
      <title>Leetcode_12_IntegerToRoman</title>
      <link>https://codenow.me/algorithm/leetcode_12_integertoroman/</link>
      <pubDate>Sun, 31 Mar 2019 21:38:00 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode_12_integertoroman/</guid>
      <description>题号：12 难度：medium 链接：https://leetcode.com/problems/integer-to-roman 描述：阿拉伯数字转罗马数字(1-3999)
 class Solution: &amp;quot;&amp;quot;&amp;quot;这道题的点在于，1/10/100/1000是可以重复的，其他数字是不可以重复的，如果用循环处理的话，要注意这一点&amp;quot;&amp;quot;&amp;quot; def intToRoman1(self, num: int) -&amp;gt; str: &amp;quot;&amp;quot;&amp;quot;照例先撸一个无脑的出来 这个还算快，不过占用空间比较大 &amp;quot;&amp;quot;&amp;quot; ten = [&#39;&#39;, &#39;I&#39;, &#39;II&#39;, &#39;III&#39;, &#39;IV&#39;, &#39;V&#39;, &#39;VI&#39;, &#39;VII&#39;, &#39;VIII&#39;, &#39;IX&#39;] roman = &#39;&#39; m, num = divmod(num, 1000) roman += &#39;M&#39; * m if num &amp;gt;= 900: roman += &#39;CM&#39; num -= 900 elif num &amp;gt;= 500: roman += &#39;D&#39; num -= 500 elif num &amp;gt;= 400: roman += &#39;CD&#39; num -= 400 c, num = divmod(num, 100) roman += &#39;C&#39; * c if num &amp;gt;= 90: roman += &#39;XC&#39; num -= 90 elif num &amp;gt;= 50: roman += &#39;L&#39; num -= 50 elif num &amp;gt;= 40: roman += &#39;XL&#39; num -= 40 x, num = divmod(num, 10) roman += &#39;X&#39; * x + ten[num] return roman def intToRoman(self, num: int) -&amp;gt; str: &amp;quot;&amp;quot;&amp;quot;看了一下 discuss，有个更简洁的，同样够快且占用空间大&amp;quot;&amp;quot;&amp;quot; M = (&#39;&#39;, &#39;M&#39;, &#39;MM&#39;, &#39;MMM&#39;) C = (&#39;&#39;, &#39;C&#39;, &#39;CC&#39;, &#39;CCC&#39;, &#39;CD&#39;, &#39;D&#39;, &#39;DC&#39;, &#39;DCC&#39;, &#39;DCCC&#39;, &#39;CM&#39;) X = (&#39;&#39;, &#39;X&#39;, &#39;XX&#39;, &#39;XXX&#39;, &#39;XL&#39;, &#39;L&#39;, &#39;LX&#39;, &#39;LXX&#39;, &#39;LXXX&#39;, &#39;XC&#39;) I = (&#39;&#39;, &#39;I&#39;, &#39;II&#39;, &#39;III&#39;, &#39;IV&#39;, &#39;V&#39;, &#39;VI&#39;, &#39;VII&#39;, &#39;VIII&#39;, &#39;IX&#39;) return M[num // 1000] + C[(num % 1000) // 100] + X[(num % 100) // 10] + I[num % 10] if __name__ == &#39;__main__&#39;: print(Solution().</description>
    </item>
    
    <item>
      <title>Leetcode: 210 Course Schedule II</title>
      <link>https://codenow.me/algorithm/leetcode-210-course-schedule-ii/</link>
      <pubDate>Sun, 31 Mar 2019 13:16:57 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode-210-course-schedule-ii/</guid>
      <description>原题链接：210. Course Schedule II 。一道基础拓扑排序题，代码如下：
class Solution: def findOrder(self, numCourses: &amp;#39;int&amp;#39;, prerequisites: &amp;#39;List[List[int]]&amp;#39;) -&amp;gt; &amp;#39;List[int]&amp;#39;: degrees = [0] * numCourses graph = [[] for _ in range(numCourses)] for edge in prerequisites: source, dep = edge degrees[source] += 1 graph[dep].append(source) stack = [] for i in range(numCourses): deps = degrees[i] if deps == 0: stack.append(i) ret = [] while len(stack) &amp;gt; 0: node = stack.pop() ret.append(node) deps = graph[node] for dep in deps: degrees[dep] -= 1 if degrees[dep] == 0: stack.</description>
    </item>
    
    <item>
      <title>DecisionTree</title>
      <link>https://codenow.me/algorithm/decision_tree/</link>
      <pubDate>Sat, 30 Mar 2019 10:39:56 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/decision_tree/</guid>
      <description>决策树 学习并构建决策树。
决策树的一个重要任务是为了数据中心所蕴含的知识信息，因此决策树可以使用不熟悉的数据集合，并从中提取出一系列规则。在这些机器根据数据创建规则时，就是机器学习的过程。专家系统中经常使用决策树，而且决策树给出结果往往可以匹敌在当前领域具有几十年工作经验的人类专家。
决策树示例：
决策树函数组成部分    优缺点 说明     优点 计算复杂度不高、输出结果易于理解，对中间值的缺失不敏感，可以处理不相关特征数据   缺点 可能会产生过度匹配问题   适用数据类型 数值型和标称型     寻找最佳划分特征值
构造决策树时，需要考虑的第一个问题：当前数据集中哪个特征在划分数据分类时起到决定作用。
为了找到这个特征，需要评估每一个特征，完成评测后，原始数据就会被划分为几个数据子集。然后遍历每个数据子集，若是都为同类，则该数据集结束分类，否则在该数据集中重新执行评估，二次分类。依次执行，直到数据被划分完毕或特征使用完毕时停止。
创建分支的伪代码函数createBranch如下图所示：
检测数据集中的每个子项是否属于同一分类： if so return 类标签： else: 寻找划分数据集的最好特征 划分数据集 创建分支节点 for每个划分的子集 调用函数createBranch并增加返回结果到分支节点中 return 分支节点  信息增益
划分数据集最大的原则是：将无序的数据变得更加有序。本章选取信息论度量信息。
在划分数据集之前之后信息发生的变化称为信息增益，知道如何计算信息增益，我们就可以计算每个特征值划分数据集获得的信息增益，获得信息增益最好的特征就是最好的选择。
1).计算给定数据集的香农熵 计算熵的公式： $$ H = -\sum{i=1}^{n}P(x{i})log{2}^{P(x{i})} $$
from math import log def calcShannonEnt(dataSet): numEntries = len(dataSet) # 获取数据集中实例总数 labelCounts = {} # 创建数据字典，键值为数据集最后一列的值，即标签  for featVec in dataSet: currentLabel = featVec[-1] # 获取标签 if currentLabel not in labelCounts.</description>
    </item>
    
    <item>
      <title>Leetcode：905 Sort Array ByParity</title>
      <link>https://codenow.me/algorithm/leetcode_905_sort_array_by_parity/</link>
      <pubDate>Sat, 30 Mar 2019 00:29:38 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode_905_sort_array_by_parity/</guid>
      <description>题号：905
难度：Easy
链接：https://leetcode.com/problems/sort-array-by-parity/
 如下是 python3 代码:
#!/usr/bin/python class Solution: def sortArrayByParity(self, A: &amp;#39;List[int]&amp;#39;) -&amp;gt; &amp;#39;List[int]&amp;#39;: lens = len(A) store_list = [None] * lens head = 0 tail = lens - 1 for i in range(lens): if A[i] % 2 == 0: store_list[head] = A[i] head += 1 else: store_list[tail] = A[i] tail -= 1 return store_list if __name__ == &amp;#39;__main__&amp;#39;: test_list = [3, 1, 2, 4] print(Solution().</description>
    </item>
    
    <item>
      <title>Leetcode: 146 LRU Cache</title>
      <link>https://codenow.me/algorithm/leetcode_146_lru_cached/</link>
      <pubDate>Sun, 24 Mar 2019 23:44:56 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode_146_lru_cached/</guid>
      <description>题号：146
难度：hard
链接：https://leetcode-cn.com/problems/lru-cache/
 使用双向链表+map，O(1) 时间复杂度内完成 get 和 put 操作
class Node: &amp;#34;&amp;#34;&amp;#34; 双链表节点 &amp;#34;&amp;#34;&amp;#34; def __init__(self, key, val): self.val = val self.key = key self.next = None self.prev = None class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.head = None self.tail = None self.index = {} def get(self, key: int) -&amp;gt; int: node = self.index.get(key) if node == None: return -1 if node.prev == None: # 这是一个表头节点 return node.</description>
    </item>
    
    <item>
      <title>Leetcode: 11 Container with most water</title>
      <link>https://codenow.me/algorithm/leetcode_11_container_with_most_water/</link>
      <pubDate>Sun, 24 Mar 2019 22:13:32 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode_11_container_with_most_water/</guid>
      <description>题号：11
难度：medium
链接：https://leetcode.com/problems/container-with-most-water 如下是 python3 代码
 from typing import List class Solution(object): def maxArea01(self, height: List[int]) -&amp;gt; int: &amp;#34;&amp;#34;&amp;#34;先撸一个暴力的&amp;#34;&amp;#34;&amp;#34; max_area = 0 for i, a1 in enumerate(height): for j, a2 in enumerate(height[i + 1:]): max_area = max(max_area, min(a1, a2) * (j + 1)) return max_area def maxArea02(self, height: List[int]) -&amp;gt; int: &amp;#34;&amp;#34;&amp;#34;从左右往中间压缩。由于总面积是较短的一根决定的 考虑到，如果 height[left] &amp;lt; height[right] 那么即使 right -= 1，max_area 也不会超过当前面积， 反而 left += 1，面积还有可能更大，因此此时应 left += 1 另一个方向的判断同理 &amp;#34;&amp;#34;&amp;#34; max_area = 0 left = 0 right = len(height) - 1 while left &amp;lt; right: if height[left] &amp;lt; height[right]: max_area = max(max_area, height[left] * (right - left)) left += 1 else: max_area = max(max_area, height[right] * (right - left)) right -= 1 return max_area if __name__ == &amp;#39;__main__&amp;#39;: data = [1, 8, 6, 2, 5, 4, 8, 3, 7] print(Solution().</description>
    </item>
    
    <item>
      <title>Leetcode: 62. Unique Paths by jarvys</title>
      <link>https://codenow.me/algorithm/leetcode_62._unique_paths_by_jarvys/</link>
      <pubDate>Thu, 21 Mar 2019 11:20:10 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode_62._unique_paths_by_jarvys/</guid>
      <description>62. Unique Paths 是一道基础动规题，递推公式：f(x,y) = f(x+1,y) + f(x, y+1)。我用递归 + memo 的方式完成的，代码如下：
class Solution(object): def fn(self, i, j, rows, cols, memo): if j &amp;gt;= cols or i &amp;gt;= rows: return 0 if j == cols - 1 or i == rows - 1: return 1 if memo[i][j] is None: memo[i][j] = self.fn(i+1,j,rows,cols,memo) + self.fn(i,j+1,rows,cols,memo) return memo[i][j] def uniquePaths(self, m, n): &amp;#34;&amp;#34;&amp;#34; :type m: int :type n: int :rtype: int &amp;#34;&amp;#34;&amp;#34; if m == 1 and n == 1: return 1 memo = [] for i in range(n): r = [] for j in range(m): r.</description>
    </item>
    
  </channel>
</rss>