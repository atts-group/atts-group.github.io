<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on ATTS</title>
    <link>https://codenow.me/algorithm/</link>
    <description>Recent content in 算法 on ATTS</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 15 Mar 2019 07:28:29 +0000</lastBuildDate>
    
	<atom:link href="https://codenow.me/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leetcode：905 Sort Array ByParity</title>
      <link>https://codenow.me/algorithm/leetcode_905_sort_array_by_parity/</link>
      <pubDate>Sat, 30 Mar 2019 00:29:38 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode_905_sort_array_by_parity/</guid>
      <description>题号：905
难度：Easy
链接：https://leetcode.com/problems/sort-array-by-parity/
 如下是 python3 代码:
#!/usr/bin/python class Solution: def sortArrayByParity(self, A: &amp;#39;List[int]&amp;#39;) -&amp;gt; &amp;#39;List[int]&amp;#39;: lens = len(A) store_list = [None] * lens head = 0 tail = lens - 1 for i in range(lens): if A[i] % 2 == 0: store_list[head] = A[i] head += 1 else: store_list[tail] = A[i] tail -= 1 return store_list if __name__ == &amp;#39;__main__&amp;#39;: test_list = [3, 1, 2, 4] print(Solution().</description>
    </item>
    
    <item>
      <title>Leetcode: 146 LRU Cache</title>
      <link>https://codenow.me/algorithm/leetcode_146_lru_cached/</link>
      <pubDate>Sun, 24 Mar 2019 23:44:56 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode_146_lru_cached/</guid>
      <description>题号：146
难度：hard
链接：https://leetcode-cn.com/problems/lru-cache/
 使用双向链表+map，O(1) 时间复杂度内完成 get 和 put 操作
class Node: &amp;#34;&amp;#34;&amp;#34; 双链表节点 &amp;#34;&amp;#34;&amp;#34; def __init__(self, key, val): self.val = val self.key = key self.next = None self.prev = None class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.head = None self.tail = None self.index = {} def get(self, key: int) -&amp;gt; int: node = self.index.get(key) if node == None: return -1 if node.prev == None: # 这是一个表头节点 return node.</description>
    </item>
    
  </channel>
</rss>