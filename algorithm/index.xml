<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on ATTS</title>
    <link>https://codenow.me/algorithm/</link>
    <description>Recent content in 算法 on ATTS</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 15 Mar 2019 07:28:29 +0000</lastBuildDate>
    
	<atom:link href="https://codenow.me/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DecisionTree</title>
      <link>https://codenow.me/algorithm/decision_tree/</link>
      <pubDate>Sat, 30 Mar 2019 10:39:56 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/decision_tree/</guid>
      <description>决策树 学习并构建决策树。
决策树的一个重要任务是为了数据中心所蕴含的知识信息，因此决策树可以使用不熟悉的数据集合，并从中提取出一系列规则。在这些机器根据数据创建规则时，就是机器学习的过程。专家系统中经常使用决策树，而且决策树给出结果往往可以匹敌在当前领域具有几十年工作经验的人类专家。
决策树示例：
决策树函数组成部分    优缺点 说明     优点 计算复杂度不高、输出结果易于理解，对中间值的缺失不敏感，可以处理不相关特征数据   缺点 可能会产生过度匹配问题   适用数据类型 数值型和标称型     寻找最佳划分特征值
构造决策树时，需要考虑的第一个问题：当前数据集中哪个特征在划分数据分类时起到决定作用。
为了找到这个特征，需要评估每一个特征，完成评测后，原始数据就会被划分为几个数据子集。然后遍历每个数据子集，若是都为同类，则该数据集结束分类，否则在该数据集中重新执行评估，二次分类。依次执行，直到数据被划分完毕或特征使用完毕时停止。
创建分支的伪代码函数createBranch如下图所示：
检测数据集中的每个子项是否属于同一分类： if so return 类标签： else: 寻找划分数据集的最好特征 划分数据集 创建分支节点 for每个划分的子集 调用函数createBranch并增加返回结果到分支节点中 return 分支节点  信息增益
划分数据集最大的原则是：将无序的数据变得更加有序。本章选取信息论度量信息。
在划分数据集之前之后信息发生的变化称为信息增益，知道如何计算信息增益，我们就可以计算每个特征值划分数据集获得的信息增益，获得信息增益最好的特征就是最好的选择。
1).计算给定数据集的香农熵 计算熵的公式： $$ H = -\sum{i=1}^{n}P(x{i})log{2}^{P(x{i})} $$
from math import log def calcShannonEnt(dataSet): numEntries = len(dataSet) # 获取数据集中实例总数 labelCounts = {} # 创建数据字典，键值为数据集最后一列的值，即标签  for featVec in dataSet: currentLabel = featVec[-1] # 获取标签 if currentLabel not in labelCounts.</description>
    </item>
    
    <item>
      <title>Leetcode：905 Sort Array ByParity</title>
      <link>https://codenow.me/algorithm/leetcode_905_sort_array_by_parity/</link>
      <pubDate>Sat, 30 Mar 2019 00:29:38 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode_905_sort_array_by_parity/</guid>
      <description>题号：905
难度：Easy
链接：https://leetcode.com/problems/sort-array-by-parity/
 如下是 python3 代码:
#!/usr/bin/python class Solution: def sortArrayByParity(self, A: &amp;#39;List[int]&amp;#39;) -&amp;gt; &amp;#39;List[int]&amp;#39;: lens = len(A) store_list = [None] * lens head = 0 tail = lens - 1 for i in range(lens): if A[i] % 2 == 0: store_list[head] = A[i] head += 1 else: store_list[tail] = A[i] tail -= 1 return store_list if __name__ == &amp;#39;__main__&amp;#39;: test_list = [3, 1, 2, 4] print(Solution().</description>
    </item>
    
    <item>
      <title>Leetcode: 146 LRU Cache</title>
      <link>https://codenow.me/algorithm/leetcode_146_lru_cached/</link>
      <pubDate>Sun, 24 Mar 2019 23:44:56 +0800</pubDate>
      
      <guid>https://codenow.me/algorithm/leetcode_146_lru_cached/</guid>
      <description>题号：146
难度：hard
链接：https://leetcode-cn.com/problems/lru-cache/
 使用双向链表+map，O(1) 时间复杂度内完成 get 和 put 操作
class Node: &amp;#34;&amp;#34;&amp;#34; 双链表节点 &amp;#34;&amp;#34;&amp;#34; def __init__(self, key, val): self.val = val self.key = key self.next = None self.prev = None class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.head = None self.tail = None self.index = {} def get(self, key: int) -&amp;gt; int: node = self.index.get(key) if node == None: return -1 if node.prev == None: # 这是一个表头节点 return node.</description>
    </item>
    
  </channel>
</rss>